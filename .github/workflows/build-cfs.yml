name: Build, Test, and Run [OMIT_DEPRECATED=true]

# Run every time a new commit pushed or for pull requests
on:
  push:
  pull_request:
  #workflow_dispatch:

env:
  SIMULATION: native
  OMIT_DEPRECATED: true

jobs:
  #Checks for duplicate actions. Skips push actions if there is a matching or duplicate pull-request action. 
  check-for-duplicates:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
        should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          concurrent_skipping: 'same_content'
          skip_after_successful_duplicate: 'true'
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'
          
  build-cfs:
    #Continue if check-for-duplicates found no duplicates. Always runs for pull-requests.
    needs: check-for-duplicates
    if: ${{ needs.check-for-duplicates.outputs.should_skip != 'true' }}
    name: Build
    runs-on: ubuntu-18.04

    strategy:
      fail-fast: false
      matrix:
        buildtype: [debug, release]

    # Set the type of machine to run on
    env:
      id: build-type
      BUILDTYPE: ${{ matrix.buildtype }}
      #ENABLE_UNIT_TESTS: true
      CACHE_VERSION_NUMBER: ${{ github.run_number }}

    steps:
      - name: Subtract for Previous Cache Version
        run: |
          echo "PREVIOUS_CACHE_VERSION = CACHE_VERSION_NUMBER - 1" >> $GITHUB_ENV
      # Check out the cfs bundle
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true

       # Grab previous cache for cfs build
      - name: Cache Previous Build
        id: cache-previous-build
        uses: actions/cache@v2
        with:
          path: ~/work/cFS/
          key: ${{ runner.os }}-build-${{ env.BUILDTYPE }}-v${{ env.PREVIOUS_CACHE_VERSION }}

      # Setup the build system
      - name: Copy Files
        if: steps.cache-previous-build.outputs.cache-hit != 'true'
        run: |
          cp ./cfe/cmake/Makefile.sample Makefile
          cp -r ./cfe/cmake/sample_defs sample_defs
          
      # Setup the build system
      - name: Make Prep
        run: make prep

      - name: Make
        id: make-build
        run: make

      # Set up new cache for cfs build
      - name: Cache Build
        id: cache-build
        uses: actions/cache@v2
        with:
          path: ~/work/cFS/
          key: ${{ runner.os }}-build-${{ env.BUILDTYPE }}-v${{ github.run_number }}

  test-cfs:
    name: Test
    runs-on: ubuntu-18.04

    needs: build-cfs

    strategy:
      fail-fast: false
      matrix:
        buildtype: [debug, release]

    # Set the type of machine to run on
    env:
      BUILDTYPE: ${{ matrix.buildtype }}
      ENABLE_UNIT_TESTS: true


    steps:

      - name: Install Dependencies
        run: sudo apt-get install lcov -y

        # set up cache/restore files from cache
      - name: Cache Test
        id: cache-test
        uses: actions/cache@v2
        with:
          path: ~/work/cFS/
          key: ${{ runner.os }}-build-${{ env.BUILDTYPE }}-v${{ github.run_number }}

      # Checks out a copy of your repository on the ubuntu-latest machine
      - name: Checkout code
        if: steps.cache-test.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          submodules: true

      # Setup the build system
      - name: Copy Files
        if: steps.cache-test.outputs.cache-hit != 'true'
        run: |
          cp ./cfe/cmake/Makefile.sample Makefile
          cp -r ./cfe/cmake/sample_defs sample_defs
      # Setup the build system
      - name: Make
        #if: steps.cache-test.outputs.cache-hit != 'true'
        run: make

      - name: Run Tests
        run: make test

      - name: Check Coverage
        run: make lcov

  run-cfs:
    name: Run
    needs: build-cfs
    runs-on: ubuntu-18.04

    strategy:
      fail-fast: false
      matrix:
        buildtype: [debug, release]

    # Set the type of machine to run on
    env:
      BUILDTYPE: ${{ matrix.buildtype }}

    steps:
      # set up cache/restore files from cache
      - name: Cache Run
        id: cache-run
        uses: actions/cache@v2
        with:
          path: ~/work/cFS/
          key: ${{ runner.os }}-build-${{ env.BUILDTYPE }}-v${{github.run_number}}

      # Checks out a copy of your repository on the ubuntu-latest machine
      - name: Checkout code
        if: steps.cache-run.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          submodules: true

      # Setup the build system
      - name: Copy sample_defs
        if: steps.cache-run.outputs.cache-hit != 'true'
        run: |
          cp ./cfe/cmake/Makefile.sample Makefile
          cp -r ./cfe/cmake/sample_defs sample_defs
      # Setup the build system
      - name: Make Install
        run: make install

      - name: List cpu1
        run: ls build/exe/cpu1/

      - name: Run cFS
        run: |
          ./core-cpu1 > cFS_startup_cpu1.txt &
          sleep 30
          ../host/cmdUtil --endian=LE --pktid=0x1806 --cmdcode=2 --half=0x0002
        working-directory: ./build/exe/cpu1/

      - name: Archive cFS Startup Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: cFS-startup-log-deprecate-true-${{ matrix.buildtype }}
          path: ./build/exe/cpu1/cFS_startup_cpu1.txt

      - name: Check for cFS Warnings
        run: |
          if [[ -n $(grep -i "warn\|err\|fail" cFS_startup_cpu1.txt) ]]; then
                  echo "Must resolve warn|err|fail in cFS startup before submitting a pull request"
                  echo ""
                  grep -i 'warn\|err\|fail' cFS_startup_cpu1.txt
                  exit -1
          fi
        working-directory: ./build/exe/cpu1/